#CLASS {mip} {kill}
#CLASS {mip} {open}

#NOP ***** Set MIP ID Code **********
#VAR {mip} {}
#LOOP {1} {5} {i} {
	#MATH {temp[digit]} {1d10 - 1};
	#VAR {mip[id]} {$mip[id]$temp[digit]}
}
#UNVAR {temp[digit]}
#info system save

#NOP ***** Kick Off MIP *************
#DELAY {2} {
	#SEND 3klient $mip[id]~~$info[SYSTEM][CLIENT_NAME]$info[SYSTEM][CLIENT_VERSION];
	#SEND 3klient LINEFEED on;
	#SEND 3klient HAA off;
	#SEND forcehp;
}

#NOP ***** Extract Raw Data *********
#ACTION {{^\#K\%$mip[id](.{3})(.{3})(.*)}$} {
	#VAR {mip[source]} {%0};
	#VAR {mip[%3][data]} {%4};
	.mipProcessFlag {%3} {%4};

	#IF {"$mip[echo]" != "on"} {
		#LINE GAG
	}
} {1}

#ALIAS {update_caption} {
	#format {world_cap}	{%-8s}	{$world};
	#format {world_cap}	{%n}	{$world_cap};
	#format {uptime_cap}	{%+8s}	{$session[uptime]};
	#format {reboot_cap}	{%+5s}	{$session[reboot]};
	#format {lag_cap}	{%+4s}	{$session[lag]};
	#math	{idle_hr}	{$idle / 3600};
	#math	{idle_min}	{$idle % 3600 / 60};
	#math	{idle_sec}	{$idle % 60};
	#if	{$idle_hr < 10}	{#var idle_hr  0$idle_hr};
	#if	{$idle_min < 10}{#var idle_min 0$idle_min};
	#if	{$idle_sec < 10}{#var idle_sec 0$idle_sec};
	#format {idle_cap}	{%+4s}	{<268>[<128>$idle_hr<268>:<128>$idle_min<268>:<128>$idle_sec<268>]<088>};
	#if	{&botcycle[] > 0} {
		#format {areacap} {<148>Cycle: <168>$cycle<148>\-<168>$botcycle[$cycle]<088>}
	} {
		#var areacap {};	
	};
	#SHOWME {<088> <128>$world_cap <068>Uptime: <168>$uptime_cap  <038>Reboot: <138>$reboot_cap  <fca>Lag: <fcb>$lag_cap  <228>Idle: $idle_cap<088>  $areacap<088>} {19}
}

#var clockon 0
#var IdleLimit 900
#TICKER {idle} {
	#math {idle} {$idle + 1};
	#if {$idle > 900} {
		#draw tile 21 1 -8 1 {<BF00>}
	}; #elseif {$idle > 840} {
		#draw tile 21 1 -8 1 {<BFF0>}
	}; #elseif {$idle > 600} {
		#draw tile 21 1 -8 1 {<B0F0>}
	}; #elseif {$idle < 600} {
		#screen clear square 21 1 -8 1
	};
	#if {$bot && $idle > $IdleLimit} {
		.stop;
		#unvar bot;
		#delay {gohome} {go home} {100}
	};
	update_caption
} {1}

#EVENT {RECEIVED INPUT} {
	#var idle 0;
}

#NOP ***** Individual Data Sections *****
#ALIAS {.mipProcessFlag} {
	#SWITCH {"%1"} {
		#CASE {"AAA"} {#NOP Sound};
		#CASE {"AAB"} {#NOP Image};
		#CASE {"AAC"} {#NOP Reboot Time;#VAR {session[reboot]} {%2};update_caption};
		#CASE {"AAD"} {#NOP Music};
		#CASE {"AAF"} {#NOP Uptime;#VAR {session[uptime]} {%2};update_caption};
		#CASE {"AAG"} {#NOP AVI movie};
		#CASE {"AAH"} {#NOP Download Media};
		#CASE {"BAA"} {#NOP Special Textstring;#showme {%2} {2}};
		#CASE {"BAB"} {#NOP 2 Way Communications;.mipProcessBABgag {%2}};
		#CASE {"BAC"} {#NOP Special Textstring2};
		#CASE {"BAD"} {#NOP Room Description};
		#CASE {"BAE"} {#NOP Mud Lag;#VAR {session[lag]} {%2};update_caption};
		#CASE {"BAF"} {#NOP Send Edit};
		#CASE {"BBA"} {#NOP Guild Point1 Mask;#FORMAT {my[gp1][name]} {%s} {%2}};
		#CASE {"BBB"} {#NOP Guild Point2 Mask;#FORMAT {my[gp2][name]} {%s} {%2}};
		#CASE {"BBC"} {#NOP Hit Point Mask;#FORMAT {my[hp][name]} {%s} {%2}};
		#CASE {"BBD"} {#NOP Spell Point Mask;#FORMAT {my[sp][name]} {%s} {%2}};
		#CASE {"CAA"} {#NOP Chat Messages;.mipProcessCAAgag {%2}};
		#CASE {"CAP"} {#NOP Window Caption Text;#FORMAT {temp} {%h} {%2};#showme {$temp} {2}};
		#CASE {"CCF"} {#NOP Send File Line};
		#CASE {"CDF"} {#NOP Send File Begin};
		#CASE {"CEF"} {#NOP Send File End};
		#CASE {"DDD"} {#NOP Room Exits;#NOP Split at Hex 160 (Non Breaking Space)};
		#CASE {"FFF"} {#NOP Combined Stats Data;.mipProcessFFF {%2}};
		#CASE {"HAA"} {#NOP Room Items};
		#CASE {"HAB"} {#NOP Item Actions;.mipProcessHAB {%2}};
		#DEFAULT {#NOP Every other non-handled flag;#showme <148>UNHANDLED MIP: %0<088>}
	}
}

#NOP ***** Combined Stats Data *****
#ALIAS {.mipProcessFFF} {
	#VAR {mip[FFF][flag]} {0};
	#VAR {mip[FFF][toggle]} {0};
	#PARSE {%1} {i} {
		#IF {"$mip[FFF][flag]" == "0"} {
			#VAR {mip[FFF][flag]} {$i};
			#VAR {mip[FFF][$i]} {};
			#VAR {mip[FFF][$i][data]} {};
		} {
			#IF {"$i" == "~"} {
				#IF {"$mip[FFF][toggle]" == "0"} {
					#VAR {mip[FFF][toggle]} {1}
				} {
					.mipProcessFFFSub {$mip[FFF][flag]} {$mip[FFF][${mip[FFF][flag]}][data]};
					#VAR {mip[FFF][flag]} {0};
					#VAR {mip[FFF][toggle]} {0}
				}
			} {
				#VAR {mip[FFF][${mip[FFF][flag]}][data]} {${mip[FFF][${mip[FFF][flag]}][data]}${i}}
			}
		}
	};
	#IF {"$mip[FFF][$mip[FFF][flag]][data]" != ""} {
		.mipProcessFFFSub {$mip[FFF][flag]} {$mip[FFF][${mip[FFF][flag]}][data]}
	}
}

#NOP ***** Separated Stats Data *****
#ALIAS {.mipProcessFFFSub} {
	#SWITCH {"%1"} {
		#CASE {"A"} {#NOP Hit Points;#VAR {my[hp][current]} {%2}};
		#CASE {"B"} {#NOP Hit Points Maximum;#VAR {my[hp][max]} {%2}};
		#CASE {"C"} {#NOP Spell Points;#VAR {my[sp][current]} {%2}};
		#CASE {"D"} {#NOP Spell Points Maximum;#VAR {my[sp][max]} {%2}};
		#CASE {"E"} {#NOP Guild Points1;#VAR {my[gp1][current]} {%2}};
		#CASE {"F"} {#NOP Guild Points1 Maximum;#VAR {my[gp1][max]} {%2}};
		#CASE {"G"} {#NOP Guild Points2;#VAR {my[gp2][current]} {%2}};
		#CASE {"H"} {#NOP Guild Points2 Maximum;#VAR {my[gp2][max]} {%2}};
		#CASE {"I"} {#NOP Primary Guild Line;.mipProcessGline {1} {%2}};
		#CASE {"J"} {#NOP Secondary Guild Line;.mipProcessGline {2} {%2}};
		#CASE {"K"} {#NOP Mob Fighting;.mipProcessFFFK {%2}};
		#CASE {"L"} {#NOP Mob Health;#VAR {enemy[hp]} {%2}};
		#CASE {"M"} {#NOP Mob Image File};
		#CASE {"N"} {#NOP Combat Round Counter;#VAR {mip[round]} {%2}};
		#DEFAULT {#NOP Every other non-handled flag}
	};
	#NOP update_status alias defined in personal hpbar trigger;
	update_status
}

#NOP ***** Combat Mob Name *****;
#ALIAS {.mipProcessFFFK} {
	#IF {"%1" != ""} {
		#VAR {enemy} {};
		#VAR {enemy[name]} {%1}
	} {
		#VAR {enemy[hp]} {}
	}
}

#NOP ***** Guild Stats Line 1/2 *****
#ALIAS {.mipProcessGline} {
	#VAR {mip[gline][%1]} {@fMipColorConv{%2}};
	#VAR {temp} {};

	#NOP GUILD SPECIFIC GLINE PROCESSING;
	#IF {"%2" != ""} {
		#SWITCH {"$guild"} {
			#CASE {"changeling"}	{.mipProcessGlineChangeling {%1}};
			#CASE {"elemental"}	{.mipProcessGlineElemental {%1}};
			#CASE {"jedi"}		{.mipProcessGlineJedi {%1}};
			#CASE {"juggernaut"}	{.mipProcessGlineJuggernaut {%1}};
			#CASE {"necromancer"}	{.mipProcessGlineNecromancer {%1}};
			#CASE {"psicorp"}	{.mipProcessGlinePsicorp {%1}};
			#CASE {"sii"}		{.mipProcessGlineSii {%1}}
			#CASE {"angel"}		{.mipProcessGlineAngel {%1}}
			#CASE {"mages"}		{.mipProcessGlineMages {%1}}
		}
	}
}

#ALIAS {.mipProcessGlineMages} {
	#IF {%1 == 1} {#NOP
	}; #ELSEIF {%1 == 2} {
		#replace {mip[gline][2]}{Bridge}{Bri};
		#replace {mip[gline][2]}{Inevitability}{Ine};
		#replace {mip[gline][2]}{Stability}{Sta};
		#replace {mip[gline][2]}{conglomeration}{Con};
		#replace {mip[gline][2]}{elemental}{Ele};
		#replace {mip[gline][2]}{maelstrom}{Mae};
		#replace {mip[gline][2]}{Flame}{Fl};
		#replace {mip[gline][2]}{Moonlight}{Mo};
		#replace {mip[gline][2]}{Lightning}{Li};
		#replace {mip[gline][2]}{Mist}{Mi};
	}; #ELSE {
		#ECHO {<171 Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineAngel} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]}	{Station: %d.%d\%} {
			#VAR {my[station][current]}		{&1.&2};
		};
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{Pos: %* Con:} {
			#VAR {my[possess][body]}		{&1};
		}{
			#REGEX {$mip[gline][2]}	{Pos: %*} {
				#VAR {my[possess][body]}		{&1};
				#replace {my[possess][body]}{  }{};
			}{
				#var {my[possess][body]}{None};
			};
		};
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineChangeling} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {Chaos Flux: %d/%d} {
			#VAR {my[relinquish][current]}	{&1};
			#VAR {my[relinquish][reset]}	{&2}
		};
		#REGEX {$mip[gline][1]} {{Density|Homeostasis|Mitosis|Morphogenesis|Resilience}: %d.%d\%} {
			#VAR {my[skill][name]}		{&1};
			#VAR {my[skill][current]}	{&2.&3}
		};
		#REGEX {$mip[gline][1]}	{\[{FF|IL}\(%d\): %d.%d\%\]>  \[%D\]} {
			#VAR {my[ff][current]}		{&3.&4};
			#VAR {my[form]}			{&5}
		}
		#REGEX {$mip[gline][1]}	{FF(%d)} {
			#VAR {my[ff][level]}		{&1};
		};
		#REGEX {$mip[gline][1]}	{IL(%d)} {
			#VAR {my[ff][level]}		{&1+};
		};
		#REGEX {$mip[gline][1]}	{FF(MAX)} {
			#VAR {my[ff][level]}		{MAX};
		};
		#REGEX {$mip[gline][1]}	{IL(_MAX_)} {
			#VAR {my[ff][level]}		{_MAX_};
		};
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{\[Bioplasts: %d\]} {#VAR {my[bioplasts]}	{&1}}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineElemental} {
	#IF {%1 == 1} {
		#REGEX {Emit<099> : <%d>%d<099>}	{#VAR {my[emit][level]}		{&2}};
		#REGEX {Equipollent}			{#VAR {my[equip]}		{on}}
							{#VAR {my[equip]}		{off}};
		#REGEX {Form<099>: <869>%w<099>\(<819>%d<099>\)}		{
			#VAR {my[form][type]}		{&1};
			#VAR {my[form][size]}		{&2}
		};
		#REGEX {Rating<099>: <819>%d<099>}			{#VAR {my[rating]}		{&1}}
	}; #ELSEIF {%1 == 2} {
		#REGEX {Stones/Waves/Shrouds<099>: <%d>%d<099>/<%d>%d<099>/<%d>%d<099>\(%d\%\)}
			#VAR {my[blasts]		{&2};
			#VAR {my[waves]}		{&4};
			#VAR {my[shrouds]}		{&6};
			#VAR {my[reset]}		{&7}
		};
		#REGEX {G2N: <%d>%d<099>}		{#VAR {my[g2n]}			{&2}}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineJedi} {
	#IF {%1 == 1} {
		#REGEX {GXP:%s{[\d\.]+}\%}		{#VAR {my[gxp][current]}	{&2}};
	}; #ELSEIF {%1 == 2} {#NOP
	}; #ELSE {
		#ECHO {<171 Invalid Gline Number <088>}
	}
}
#ALIAS {.mipProcessGlineJuggernaut} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {Ammo:\[%d/%d/%d/%d/%d\] <838>Gxp: %d.%d\%<099> Hits: \[%d\] <868>Coffin: %d/%d} {
			#VAR {ammo[1]}			{&1};
			#VAR {ammo[2]}			{&2};
			#VAR {ammo[3]}			{&3};
			#VAR {ammo[4]}			{&4};
			#VAR {ammo[5]}			{&5};
			#VAR {gxp}			{&6.&7};
			#VAR {hits}			{&8};
			#VAR {corpses[coffin]}		{&9};
			#VAR {corpses[coffinsize]}	{&10}
		}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {Nukes: [%d/%d]<099> Reset: [%d\%]} {
			#VAR {nukes}		{&1};
			#VAR {nukes_max}	{&2};
			#VAR {reset}		{&3}
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineNecromancer} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {C:%d}		{#VAR {corpses[inventory]}	{&1}};
		#REGEX {$mip[gline][1]} {Worth:%d}	{#VAR {my[worth]}		{&1}};
		#REGEX {$mip[gline][1]} {Tport:%d/%d}	{
			#VAR {my[ports][current]}	{&1};
			#VAR {my[ports][max]}		{&2}
		};
		#REGEX {$mip[gline][1]} {Sprk:%d/%d}	{
			#VAR {my[sparks][current]}	{&1};
			#VAR {my[sparks][max]}		{&2}
		};
		#REGEX {$mip[gline][1]} {Prot:%wX}	{#VAR {my[prot]}		{&1}};
		#REGEX {$mip[gline][1]} {Circle:%d}	{#VAR {my[gxp]}			{&1}}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{Undead:%w}	{#VAR {my[undead]}		{&1}};
		#REGEX {$mip[gline][2]}	{SPf:%d/%d}	{
			#VAR {my[sp][fuse][current]}	{&1};
			#VAR {my[sp][fuse][max]}	{&2}
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlinePsicorp} {
	#IF {%1 == 1} {
		#NOP
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {G2N: %* / %d\%} {
			#FORMAT {my[gxp][tnl]} {%d} {&1};
			#VAR {my[gxp][per]} {&2}
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineSii} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]}	{Regen: %w}	{#VAR {my[regen]}		{&1}}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{Con:%d/%d}	{
			#VAR {my[control][current]}	{&1};
			#VAR {my[control][max]}		{&2}
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineBard} {
	#IF {%1 == 1} {
		
	}; #ELSEIF {%1 == 2} {
		
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}


#NOP ***** 2 Way Communication (Tell/Emote) *****
#ALIAS {.mipProcessBABgag} {
	#var mipgag 0;

	#NOP Duplicate 'from' soul;
	#REGEX {%0} {~you~} {#var mipgag 1};


	#NOP Add cases for tells/emotes to gag from monitor, such as mob emotes;

	#NOP Byron crying OW;
	#REGEX {%01} {~Byron~cries 'OW!!'} {#var mipgag 1};

	#NOP Dundee;
	#REGEX {%0} {~A~shiver runs through you as you successfully fight off an infection.} {#var mipgag 1};
	#REGEX {%0} {~Your~head throbs briefly as you successfully fight off an infection.} {#var mipgag 1};
	#REGEX {%0} {~Your~temperature spikes as you successfully fight off an infection.} {#var mipgag 1};
	#REGEX {%0} {~Your~palms begin to sweat as you successfully fight off an infection.} {#var mipgag 1};
	#REGEX {%0} {~Your~neck aches slightly as you successfully fight off an infection.} {#var mipgag 1};

	#NOP Mages;
	#REGEX {%0} {~Torrential~energies stream momentarily through the nexus of stability into the material world.} {#var mipgag 1};
	#REGEX {%0} {~Blazing~with strange energies, the nexus of stability momentarily becomes a conduit for extradimensional forces.} {#var mipgag 1};

	#NOP Changelings;
	#REGEX {%0} {tiny translucent bombardier beetle} {#var mipgag 1};

	#NOP Hell Cows;
	#REGEX {%0} {~A~cow falls, but the herd continues on!} {#var mipgag 1};
	#REGEX {%0} {~The~lonesome cow topples to the ground, the herd finally slain.} {#var mipgag 1};

	#NOP Knights;
	#REGEX {%0} {~Bela~} {#var mipgag 1};

	#NOP Lost Soul;
	#REGEX {%0} {~~You try to clasp onto the diamond spectacle, but your hands fall right through!} {#var mipgag 1};
	#REGEX {%0} {~~Bursts of %w colored energy shoot off from the spectacle.} {#var mipgag 1};
	#REGEX {%0} {~~The diamond-spectacle spins and turns on an unseen axis.} {#var mipgag 1};

	#NOP Party Divvy;
	#REGEX {%0} {[PARTY] GOLD divvy called by } {#var mipgag 1};
	#REGEX {%0} {[PARTY] coins called by } {#var mipgag 1};
	#REGEX {%0} {[PARTY] All gold divvied, total: } {#var mipgag 1};

	#NOP Sii;
	#REGEX {%0} {~Your~malicious attacks fade} {#var mipgag 1};
	#REGEX {%0} {~The~corpse explodes as a small vicious lizard-like creature bursts forth!} {#var mipgag 1};

	#NOP Zelligar's Headband;
	#REGEX {%0} { stumbles in confusion as the headband hypnotizes } {#var mipgag 1};
	#REGEX {%0} { stumbles in confusion as the amulet hypnotizes } {#var mipgag 1};

	#IF {$mipgag == 0} {.mipProcessBAB %0}
}

#var chat[rows] 17
#var chat[page] 1
#var chat[max] 100

#ALIAS {show_chat} {
	#math chat[start]	{$chat[rows] * $chat[page]};
	#math chat[end]		{$chat[rows] * $chat[page] - $chat[rows] + 1};
	#line sub {var} #draw {tile} 1 1 $chat[rows] -44 $chat[log][-$chat[start]..-$chat[end]]
}

#ALIAS {update_chat} {
	#if {&chat[log][] > $chat[max]} {
		#list chat[log] del 1
	};
	#list chat[log] ins -1 {%0};

	#class {chat} {write} {.tt/3k/vars/${mud}chat.var};
	show_chat
}

#ALIAS {resume_chat}{
	#if {$my[config][db][chat] == 1}{
		db_query_chat 99;
		#loop {1}{99}{count}{
			#list chat[log] ins -1 {${db_chat_query[$count][timestamp]} ${db_chat_query[$count][message]}};
		};
	}{
		#script {tail -n 99 .tt/logs/{$mud}.chat | awk '{print "#list chat[log] ins -1 {"$0"}"}'};
	};
	show_chat;
};

#ALIAS {chatup} {
	#if {$chat[rows]*{$chat[page]+1} <= $chat[max] &&
	     $chat[rows]*{$chat[page]+1} <= &chat[log][]} {
		#math chat[page] {$chat[page]+1};
		show_chat
	}
}
#ALIAS {chatdown} {
	#if {$chat[page] > 1} {
		#math chat[page] {$chat[page]-1};
		show_chat
	}
}
#ALIAS {chatend} {
	#math chat[page] 1;
	show_chat
}

#ALIAS {.mipProcessBAB} {
	#REGEX {%1} {{(.*)\~(.*)\~(.*)}} {
		#IF {"&3" != "0"} {
			#var mip[comm][data]	{&4};
			#var mip[comm][source]	{&3};
			#var mip[comm][line]	{Tell};
			#var mip[comm][command]	{tell $mip[comm][source]};
			#format {timestamp} {%t} {[<268>%H<088>:<268>%M<088>] };
			#format {dbtimestamp} {%t} {[%Y:%m:%d %H:%M:%S]};
			#IF {"&2" == "x"} {
				#NOP Message to another player;
				#var mip[comm][twoway] {to};
				#if {$my[config][db][chat] == 1}{
					#var {dbmess}{To &3: &4};
					db_submit_chat $dbmess;
				}{
					#line log {.tt/logs/{$mud}.chat} {$timestamp\};
					#line log {.tt/logs/{$mud}.chat} {<178>To &3<088>: &4};
				};
				update_chat ${timestamp}<178>To &3<088>: &4;
			} {
				#NOP Message from another player;
				#var mip[comm][twoway] {from};
				#if {$my[config][db][chat] == 1}{
					#var {dbmess}{&3: &4};
					db_submit_chat $dbmess;
				}{
					#line log {.tt/logs/{$mud}.chat} {$timestamp\};
					#line log {.tt/logs/{$mud}.chat} {<178>&3<088>: &4};
				};
				update_chat ${timestamp}<178>&3<088>: &4;

				#NOP Chat Tools;
				#if  {$idle <= 900} {
					#NOP 8Inix;
					#if {"$8inix" == "on"} {
						#regex {$mip[comm][data]} {%i8inix} {
							do8inix
						}
					};

					#NOP IDefine;
					#if {"$idefine" == "on"} {
						#regex {$mip[comm][data]} {%iidefine} {
							dodefine
						}
					};

					#NOP UDefine;
					#if {"$udefine" == "on"} {
						#regex {$mip[comm][data]} {%iudefine} {
							doudefine
						}
					};

					#NOP ADDS;
					#if {"$adds" == "on"} {
						#regex {$mip[comm][data]} {%iiwx} {
							doadds
						}
					};

					#NOP Stocks;
					#if {"$stocks" == "on"} {
						#regex {$mip[comm][data]} {%iistocks} {
							dostocks
						} {
							#regex {$mip[comm][data]} {%iistock} {
								dostock
							}
						}
					};

					#NOP Crypto;
					#if {"$crypto" == "on"} {
						#regex {$mip[comm][data]} {%i: icrypto} {
							docrypto
						}
					}
				}
			}
		}
	}
}

#NOP ***** Broadcast Communication (Chat/Shout) *****
#ALIAS {.mipProcessCAAgag} {
	#var mipgag 0;

	#NOP Party Divvy gagsd	#NOP Party Divvy;
        #REGEX {%0} {[PARTY] GOLD divvy called by } {#var mipgag 1};
	#REGEX {%0} {[PARTY] coins called by} {#var mipgag 1};
	#REGEX {%0} {[PARTY] Divvy of %d coins called by} {#var mipgag 1};
        #REGEX {%0} {[PARTY] All gold divvied, total: } {#var mipgag 1};

	#IF {$mipgag == 0} {.mipProcessCAA %0}
}
#ALIAS {.mipProcessCAA} {
	#REGEX {%1} {{(.*)\~(.*)\~(.*)\~(.*)}} {
		#var {mip[comm][command]}	{&2};
		#var {mip[comm][line]}		{&3};
		#var {mip[comm][source]}	{&4};
		#var {mip[comm][data]}		{&5};
		#format {timestamp} {%t} {[<268>%H<088>:<268>%M<088>] };
		#format {dbtimestamp} {%t} {[%Y:%m:%d %H:%M:%S]};

		#NOP Ansify lines;
		#var {commcol} {<178>};
		#switch {"$mip[comm][line]"} {
			#case {"ADMIN"}			{#var {commcol} {<158>}};
			#case {"Bear"}			{#var {commcol} {<168>}};
			#case {"Bloodname"}		{#var {commcol} {<138>}};
			#case {"Clan Cad"}		{#var {commcol} {<158>}};
			#case {"Com"}			{#var {commcol} {<128>}};
			#case {"Cyborg Com"}		{#var {commcol} {<138>}};
			#case {"Cyborg Death"}		{#var {commcol} {<218>}};
			#case {"Cyborg Guild"}		{#var {commcol} {<228>}};
			#case {"Cyborg Notify"}		{#var {commcol} {<268>}};
			#case {"Cyborg Syndicate"}	{#var {commcol} {<128>}};
			#case {"Eternal Main"}		{#var {commcol} {<168>}};
			#case {"Events"}		{#var {commcol} {<168>}};
			#case {"Explorer"}		{#var {commcol} {<178>}};
			#case {"Falcon"}		{#var {commcol} {<128>}};
			#case {"Gamers"}		{#var {commcol} {<268>}};
			#case {"Jedi"}			{#var {commcol} {<158>}};
			#case {"JEDI"}			{#var {commcol} {<128>}};
			#case {"JuggAnnounce"}		{#var {commcol} {<118>}};
			#case {"JuggMissiles"}		{#var {commcol} {<118>}};
			#case {"JuggNewbie"}		{#var {commcol} {<258>}};
			#case {"Lottery"}		{#var {commcol} {<178>}};
			#case {"Main"}			{#var {commcol} {<118>}};
			#case {"Newbie"}		{#var {commcol} {<138>}};
			#case {"Party"}			{#var {commcol} {<128>}};
			#case {"Poll"}			{#var {commcol} {<178>}};
			#case {"Professions"}		{#var {commcol} {<178>}};
			#case {"Psi Main"}		{#var {commcol} {<168>}};
			#case {"Shout"}			{#var {commcol} {<178>}};
			#case {"Whine"}			{#var {commcol} {<118>}};
			#case {"Wolf"}			{#var {commcol} {<228>}};
			#case {"Zilch_shout"}		{#var {commcol} {<168>}};
			#default			{#var {commcol} {<178>}}
		};
		

		#var {mip[comm][cdata]} {$mip[comm][data]};
		#replace {mip[comm][cdata]} {: } {: <099>};
		#var {mip[comm][cdata]} {$commcol$mip[comm][cdata]<099>};
		#if {$my[config][db][chat] == 1}{
			#var {dbmess}{$mip[comm][data]};
			db_submit_chat $dbmess;
		}{
			#line log {.tt/logs/{$mud}.chat} {$timestamp\};
			#line log {.tt/logs/{$mud}.chat} {$mip[comm][cdata]};
		};
		update_chat ${timestamp}$mip[comm][cdata];
		#if {$idle <= 900} {
			#NOP 8Inix;
			#if {"$8inix" == "on"} {
				#regex {$mip[comm][data]} {%i: 8inix} {
					do8inix
				}
			};

			#NOP IDefine;
			#if {"$idefine" == "on"} {
				#regex {$mip[comm][data]} {%i: idefine} {
					dodefine
				}
			};

			#NOP UDefine;
			#if {"$udefine" == "on"} {
				#regex {$mip[comm][data]} {%i: udefine} {
					doudefine
				}
			};

			#NOP ADDS;
			#if {"$adds" == "on"} {
				#regex {$mip[comm][data]} {%i: iwx} {
					doadds
				}
			};

			#NOP Stocks;
			#if {"$stocks" == "on"} {
				#regex {$mip[comm][data]} {%i: istocks} {
					dostocks
				} {
					#regex {$mip[comm][data]} {%i: istock} {
						dostock
					}
				}
			};

			#NOP Crypto;
			#if {"$crypto" == "on"} {
				#regex {$mip[comm][data]} {%i: icrypto} {
					docrypto
				}
			}
		}
	}
}

#NOP ***** Room Nouns Handling *****
#ALIAS {.mipProcessHAB} {
	#REGEX {%1} {{(.*)\~(.*)\~(.*)\~(.*)}} {
		#list {nouns} {fin} {&3} {noun_index};
		#if {$noun_index == 0} {
			#list {nouns} {add} {&3};
			#if {"$autosearch" == "on"} {
				exa &3;
				search &3
			}
		}
	}
}
#list {nouns} {create}

#NOP ***** Guild Stats Line Color Handling *****
#FUNCTION {fMipColorConv} {
	#VAR {result} {%1};
	#REPLACE {result} {>} {<099>};
	#REPLACE {result} {<b} {<848>};
	#REPLACE {result} {<c} {<868>};
	#REPLACE {result} {<g} {<828>};
	#REPLACE {result} {<r} {<818>};
	#REPLACE {result} {<s} {<278>};
	#REPLACE {result} {<v} {<858>};
	#REPLACE {result} {<w} {<178>};
	#REPLACE {result} {<y} {<838>}
}

#CLASS {mip} {close}
