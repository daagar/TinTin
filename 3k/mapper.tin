#class {mapper} {open}

#regex {"$world"} {3s} {
	#var {mapfile}{3s.map}
} {
	#var {mapfile}{daagar.map}
}
#map read .tt/map/${mapfile}

#map offset 1 -42 17 -1
#map goto {roomnote} {home}

/* Move Event */
#alias {mapupdate} {
	#map {get} {ROOMVNUM} {roomvnum};
	#map {get} {ROOMAREA} {roomarea};
	#map {get} {ROOMNAME} {roomname};
	#map {get} {ROOMDESC} {roomdesc};
	#format {roomname_len}	{%L} {$roomname};
	#format {roomvnum_len}	{%L} {$roomvnum};
	#format {roomarea_len}	{%L} {$roomarea};
	#format {roomdesc_len}	{%L} {$roomdesc};
	#math {name_len} {42-$roomvnum_len};
	#format {name_trunc} {%.${name_len}s} {$roomname};
	#unvar area_mapped;
	#map list {} {} {} {$roomarea} {variable} {area_mapped};
	#var {room_cnt} {&area_mapped[]};
	#draw {tile} 16 -42 16 -1 {<020>$roomarea <140>(<120>$room_cnt<140>)<099>};
	#draw {tile} 17 -42 17 -1 {<140>[<030>$roomvnum<140>] <130>$name_trunc<099>}
}

#event {MAP UPDATED VTMAP} {
	#delay {0.05} {mapupdate}
}

#event {MAP ENTER ROOM} {
	#map get roomvnum roomvnum;
	#system {echo "#map goto $roomvnum" > .tt/map/lastroom.tt};
	#if {"$mapping" == "on"} {
		mapupdate
	}
}

#event {MAP EXIT ROOM} {
	#list nouns clear
}

/* Map Follow on Following Others */
#act {%1 leaves %2\.} {
	#var following %1;
	#var foldir %2;

	#switch {"$foldir"} {
		#case {"north"}	{#var foldir n};
		#case {"south"}	{#var foldir s};
		#case {"east"}	{#var foldir e};
		#case {"west"}	{#var foldir w};
		#case {"down"}	{#var foldir d};
		#case {"up"}	{#var foldir u};
	}
}

#act {%1 leaves following %2} {
	#format {follower} {%l} {%1};
	#if {"$follower" == "$world" && %2 == "$following"} {
		#map move $foldir
	}
} {4}

/* Data Grab Trigger */
#var longcap off

#function cartcheck {
	#format cart {%.20s} {%0};
	#if {"$cart" == "                    " ||
	     "$cart" == ""} {
		#return 1
	} {
		#return 0
	}
}

#NOP Kill-Loop to find rooms with critters and no people

#NOP Room Short with Exits
#act {{=S=(.*) \((.*)\)\s*=S=}} {
	#var room %2;
	#var exits %3;
#nop {Fl Stepper without stepper direction};
	#var total_items 0;
	#var player_room 0;
	#var critter_room 0;
        #var upexit 0;
        #var room_dirs %3;
        #replace {room_dirs}{,}{;};
        #var {room_short_desc}{%1};
        #regex {$room_short_desc}{=S=%* (%*)}{
        	#var {room_short_desc}{&1};
        };
        #list {room_dirs}{create}{$room_dirs};
        #list {room_dirs}{find}{u}{upexit};
        #if {$upexit == 0}{
                #list {room_dirs}{find}{exit}{upexit};
        };
        #if {$upexit == 0}{
                #list {room_dirs}{find}{portal}{upexit};
        };
        #if {$upexit == 0}{
                #list {room_dirs}{find}{menu}{upexit};
        };
#nop {  #if {$upexit > 0 && "$area" == "csewers"} };
        #if {"%2" == "Sewer Portal" && "$area" == "Chaotic Sewers"}{
                #map name exit;#map set roomsymbol x;#map set roomcolor <128>;
                #map dig u;
                #map {exit}{u}{command}{#read Dirs/csewers_unload.tt;u;#var findloc 1};
                #if {$findexit == 1}{#var domove 0};
        };
        #list {room_dirs}{find}{$reversedir}{reverse_dir};
        #list {room_dirs}{size}{room_exits};
#nop {End of support for Fl Mapper};
	#if {"$mapping" == "on"} {
		#replace exits {,} {;};
		#foreach {$exits} {eachexit} {#map dig $eachexit};
		#map get {roomexit} {rexit};
		#foreach {$rexit} {eachexit} {
			#map at {$eachexit} {
				#map get {roomarea} {eacharea};
				#if {"$eacharea" == ""} {
					#map set {roomcolor} {<118>}
				}
			}
		};
		#if {$roomname_len == 0} {
			#map set roomname {%2 (%3)}
		};
		#if {$roomarea_len == 0} {
			#map set roomarea {$area};
			#map set roomcolor
		};
		#if {$roomdesc_len == 0} {
			#var longcap on;
			#unvar long;
			#act {%%1} {
				#if {@cartcheck{%%1}} {
						#nop
					} {
						#var long {${long}%%1 }
				}
			} {2}
		};
		#delay 0 mapupdate
	};
        #if {$stepper == 1}{
                #if {${domove} == 1}{
                        #if {$findexit == 1}{
                                kill-loop;
                        }{
                                #if {"$mapping" == "on"}{
                                        #delay {0.15}{kill-loop};
                                }{
                                        #delay {0.05}{kill-loop};
                                };
                        };
                };
        }{
                #if {${domove} == 1}{
			dir_selection;
		};
	};
}

#NOP Room Short with No Exits, Lowered Priority
#act {=S=%1%s=S=} {
	#var room %1;
	#if {"$mapping" == "on"} {
		#if {$roomname_len == 0} {
			#map set roomname {%1}
		};
		#if {$roomarea_len == 0} {
			#map set roomarea {$area};
			#map set roomcolor
		};
		#if {$roomdesc_len == 0} {
			#var longcap on;
			#unvar long;
			#act {%%1} {
				#if {@cartcheck{%%1}} {
						#nop
					} {
						#var long {${long}%%1 }
				}
			} {2}
		};
		#map get {roomvnum} {gonum};
		#map goto $gonum;
	}
} {6}

#act {=X={.*}} {
	#if {"$longcap" == "on"} {
		#var longcap off;
		#unact {%%1};
		#map set roomdesc {$long}
	}
} {1}

#act {AREA NAME: %1 [%2]} {
	#var area %1
}

#act {AREA RATING -> %1 [%2]}{
	#var area %2
}


/* Aliases */
#NOP count the # of rooms mapped
#alias {area_mapped %1} {
	#unvar area_mapped;
	#map list {} {} {} {%1} {variable} {area_mapped};
	#showme {&area_mapped[] rooms mapped.};
}

#NOP Color rooms that have no area set (unexplored)
#alias nacolor {
	#loop 1 20000 {cnt} {
		#map at {$cnt} {
			#map get {roomarea} {cntarea};
			#if {"$cntarea" == ""} {#map set roomcolor <118>}
		}
	};
	#map get {roomvnum} {gonum};
	#map goto $gonum;
	#draw {tile} 16 -42 16 -1 {<020>$roomarea <140>(<120>$room_cnt<140>)<099>};
	#draw {tile} 17 -42 17 -1 {<140>[<030>$roomvnum<140>] <130>$roomname<099>}
}

#alias {go} {
	#if {"$mapping" == "on"}{
		mapoff;
	};
        #map flag static on;
        #var domove 0;
	#map find {roomnote} {%0%*};
        #map get roomvnum returnroom;
        #var returnpathroom $room_num;
	#path run
}

#alias goback {
        #map run $returnroom;
        #var room_num $returnpathroom;
}

#alias {mapgo} {
	#map goto {roomnote} {%0};
}

#alias {start} {
	#map destroy world;
	#map read .tt/map/${mapfile};
	#map goto {roomnote} {%0};
	#map offset 1 -42 17 -1
}

#alias {findhere} {
	#if {"$room" == ""} {
		look
	};
	#map list {roomarea} {$area} {roomname} {$room%*};
	#map list {roomarea} {$area} {roomname} {$room%*} {variable} {findroom};
	#if {&findroom[] == 1} {
		#list {foundroom} {create} {$findroom};
		#map goto $foundroom[1]
	}
}


#alias {mapsearch} {
	#show <129>Name matches:<088>;
	#map list {%i%*%0%*};
	#show \n;
	#show <129>Note matches:<088>;
	#map list {} {} {} {} {%i%*%0%*};
}

#alias {mapname %1} {
	#map name %1;
	#map write .tt/map/${mapfile}
}

#alias {mmu}{
	#map run {%0};
	#map set {roomnote} {%0};
	#map set {roomname} {%0};
	#map write .tt/map/${mapfile};
};

#alias {mapsave} {#map write .tt/map/${mapfile}}
#alias {mapon} {
	!brief off yes;
	#map flag static off;
	#var mapstatic 1;
	#var area %1;
	#var mapping on;
#nop {Biome Work in progress
	#if {"$area" == "Changeling"}{
		#sub {^%*=X=(} {=X=Biome (};
		#sub {^+%*+%s} {};
		#sub {^|%*|%s} {};
		#sub {^ %s} {};
	};
};
	!rating;
}
#alias {mapoff}{
	#nop {
	!brief on yes;
	};
	!brief on full;
	#map flag static on;
	#unvar mapstatic;
	#unvar mapping;
#nop {Biome Work in progress
	#unsub {^%*=X=(};
	#unsub {^+%*+%s};
	#unsub {^|%*|%s};
	#unsub {^ %s};
};
}
#map flag static on
#unvar mapstatic

#alias {ma} {#map set roomarea {$area}}

#NOP Search Room Nouns (built by MIP)
#alias {sn} {
	#var noun_cnt &nouns[];
	#loop 1 &nouns[] cnt {
		exa $nouns[$cnt];
		search $nouns[$cnt]
	};
	#delay 0.5 {
		#if {$noun_cnt < &nouns[]} {
			#echo {<128>New items found!  Search again!<088>}
		}
	}
}

/* Screen Sizing */
#event {SCREEN RESIZE} {
	#read .tt/3k/draw.tin
}

/* Transports */
#nop { These rooms are all too specific.  may address later
	#NOP Abyss
	#act {Abyssmal Portal (s,portal)} {#map goto 5159} {1}

	#NOP Ao
	#act {** The Docks of Ao ** (se)} {#map goto 15463} {1}

	#NOP Ascended
	#act {Arid environment (sw,n,s,e,climb)} {#map goto 16718} {1}

	#NOP Chaos TV
	#act {AREA NAME: Simpsons [Doh]} {
		#if {"$area" != "Simpsons"} {
			#var {area} {Simpsons};
			#map get {roomvnum} {tvroom};
			#map goto 8315;
		}
	} {4}

	#act {AREA NAME: Simpsons Expansion [Lostar]} {
		#var {area} {Simpsons};
	} {4}

	#act {AREA NAME: Simpsons Expansion [Frank]} {
		#var {area} {Simpsons Expansion};
		#map get {roomvnum} {tvroom};
		#map goto 8227
	} {4}
	#act {^   You dive cleanly through the computer screen!} {
		#map goto $tvroom
	}

	#NOP Death
	#act {^You die.$} {#map goto 6247}

	#NOP Death Taco
	#act {^You shoot through a graceful arc, and feel weightless for the} {#map goto {roomnote} roaches}

	#NOP Dragon Realms
	#act {^You have to retreat against the onslaught of fire!} {#map move vortex}

	#NOP Einstein
	#act {^Standing on the bench, you relax and the stagedive through the rift} {#map goto 7039}

	#NOP Funkytown
	#act {^The intense gravity of the sun pulls the coaster to its surface where you} {#map goto 17497}

	#NOP Global Merc Training Theatre
	#act {^You have exited the simulation, thank you for playing.} {#map goto 15144}

	#NOP Kayos Portal
	#act {^You leap into the unknown!} {
		#map get {roomvnum} {num};
		#if {$num == 10278} {
			#map goto $plungeroom
		} {
			#var plungeroom $num;
			#map goto 10278
		}
	}
	#act {^You touch the beacon, and a friendly ship belonging to The Vigilant swings by.} {#map goto 10278}

	#NOP Necromancers
	#act {^You tumble down the river and find yourself on a rocky bank inside} {#map goto 7613}

	#NOP Night of Colour
	#act {^The balloon softly touches down, basket bumps lightly.} {exit}
	#act {^You step out of the basket, into forest.} {
		#map get {roomarea} {area};
		#if {"$area" == "Night of Colour"} {
			#map goto 16359
		} {
			#map goto  16530
		}
	}
	#act {^You step out of the basket, into chaos.} {
		#map get {roomarea} {area};
		#if {"$area" == "Night of Colour"} {
			#map goto 16307
		} {
			#map goto 16527
		}
	}

	#NOP Ravenloft Castle
	#act {^You warily step out onto the cold, damp ground.} {#map goto 20756}
	#act {^You then step out of the coach and find yourself back} {#map goto 4631}

	#NOP Sausage Dimensions
	#act {^The frankfurter SMACKS you so hard you wake up somewhere else!} {#map goto 17561}

	#NOP Science Shuttle
	#act {^The captain announces: Welcome to Midway Space Station.$} {exit}
	#act {^The captain announces: Welcome to Houston Transport Center.$} {exit2}

	#NOP Serinth
	#act {^The World of Serinth Board containing } {#map goto 16722}

	#NOP Starcraft:Broodwar
	#act {^Door number: 3, Access Code: %1$} {#var starcraft_code %1}

	#NOP The Lost Village of Willothorn
	#act {^You swim for your life for the surface and end up back where} {#map goto 14087}

	#NOP Xaxis
	#act {^Welcome to Xaxis!} {#map goto 15875}
	#act {^Here we are folks. Welcome to the Isle of Equinity!} {#map goto 15913}

	#NOP Wayhaven Ferry
	#act {^The ferryman says: Well, here you are.} {#map goto 7354}
};

#NOP ** MARK SOMETHING GREEN **
#alias mark {#map set roomcolor <128>};

/* Blocked Exits */
#act {^You cannot go } {
	#if {$mapstatic} {
		#map undo
	}
}
#act {^You cannot get it up.} {
	#if {$mapstatic} {
		#map undo
	}
}

#NOP ** GUILDS **
#NOP Juggernauts
#act {^The room is locked.} {#map undo}
#act {^Dirk says: This area is for Wolves not } {#map undo}
#act {^Harlow says: You are not allowed here please turn around and leave at once} {#map undo}
#act {^Only members of clan jade falcon can go this way.} {#map undo}

#NOP Bards
#act {^You can't go there!} {#map undo}

#NOP ** AREAS **
#NOP Abbey
#act {^A feeling of fear and dread washes over you, preventing you from going} {#map undo}
#act {^A feeling of dread washes over you, preventing you from going any further east.} {#map undo}

#NOP Body Mansion
#act {^You bump into a locked door.} {#map undo}

#NOP Carnegie
#act {^Woody Allen says: You're going to have to wait for security!} {#map undo}
#act {^Mel Brooks blocks the exit.} {#map undo}
#act {^Jay-Z says: You're going to have to wait for security!} {#map undo}
#act {^Jay-Z says: Where do you think you're going?} {#map undo}
#act {^Jay-Z stops you leaving.} {#map undo}
#act {^Jay-Z blocks the exit.} {#map undo}
#act {^Trixie Hilton blocks the exit.} {#map undo}

#NOP Chaos Cinemaplex
#act {^The movie usher asks for your movie ticket. When you fail to come up with} {#map undo}

#NOP Cove of the Three (Lost Soul)
#act {^A magical force pushes you back, and you hear a voice} {#map undo}

#NOP Crystal Stairway
#act {^The Warrior will not let you invade her home any further.} {#map undo}
#act {^The warrior will not let you pass.} {#map undo}

#NOP Detroit
#act {^Officer yells: Get him, he must be stealing something!!!!} {#map undo}

#NOP Dundee
#act {^The foliage in this part of the swamp is extremely thick and will take} {#map undo}

#NOP Dragon Realms
#act {^You cannot get past the dragon guards.} {#map undo}

#NOP Fallout Shelter
#act {^Core Guard jumps in your way, blocking your path!} {#map undo}

#NOP Ice Fishing
#act {^You are unable to climb the bank here.  It is very steep, and with all} {#map undo}
#act {^You can't go through a solid wall.  Try going around the shack, and} {#map undo}

#NOP Ice Mountains (Verbeeg)
#act {^The magical barrier is impenetrable.$} {#map undo}
#act {^The cryohydra snaps one of its heads at you as you try and approach} {#map undo}

#NOP Land
#act {^You are caught like a fly in a spider web, burning and twisting as} {#map undo}

#NOP Longshadow
#act {^The drawbridge is currently upright denying you access to the castle.} {#map undo}

#NOP Mage Tower
#act {^The guard blocks your passage.} {#map undo}

#NOP Night of Colour
#act {^Impediment slaps you back, thorns tearing.} {#map undo}
#act {^Serrated sword extended, Bulwark stops your progress.} {#map undo}

#NOP Rabbit Fields
#act {^The rabbit prevents you from going that way.} {#map undo}

#NOP Ravenloft
#act {^You try to go down, but suddenly feel more terrified than} {#map undo}
#act {^The trees move together and bar your path!} {#map undo}
#act {^A deathly chill blows from the south, blasting into Inix!} {#map undo}

#NOP Rocky Hill
#act {^Waving their rusty scimitars and growling loudly, the jackalmen} {#map undo}

#NOP Simpsons
#act {^   The Guard stops you and says: Aww no...you can't go in there.} {#map undo}

#NOP SolChem
#act {^The gang member shoves you back.} {#map undo}

#NOP Theatre of Souls
#act {^A closed door blocks your way.} {#map undo}

#NOP Underdark
#act {^The {drow|guard} prevents you from going that way.} {#map undo}
#act {^The troll will not let you pass.} {#map undo}

#NOP Whorehouse
#act {^Doh shoves you backwards with a scowl.} {#map undo}
#act {^Your feet are mired in the bird poop, you can't seem to move!!} {#map undo}

#class {mapper} {close}
